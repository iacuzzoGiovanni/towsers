// Generated by CoffeeScript 1.11.1

/*
 * Created by Iacuzzo Giovanni
 */
(function() {
  'use-strict';

  /*
   * @module {custoWavesurfer}
   */
  var cWavesurfer;
  cWavesurfer = angular.module('custoWavesurfer', []);
  cWavesurfer.factory('mdWavesurferUtils', [
    '$q', '$document', '$timeout', function($q, $document, $timeout) {
      return {
        getLength: function(object) {
          var deferred, estimateLength;
          deferred = $q.defer();
          estimateLength = function(url) {
            var audio;
            audio = $document[0].createElement('audio');
            audio.src = url;
            audio.addEventListener('loadeddata', function() {
              deferred.resolve(this.duration);
              audio.removeEventListener('loadeddata', this);
              audio.src = 'data:audio/mpeg,0';
            });
            audio.addEventListener('error', function(e) {
              deferred.resolve(e.target.error);
            });
          };
          estimateLength(object);
          return deferred.promise;
        }
      };
    }
  ]);
  cWavesurfer.filter('convertToHumanMinutes', function() {
    return function(d) {
      var dur, mm, ss;
      mm = Math.floor(d / 60);
      ss = Math.round(d % 60);
      if (ss < 10) {
        ss = '0' + ss;
      }
      return dur = mm + ':' + ss;
    };
  });
  cWavesurfer.controller('musicAudioPlayerController', [
    '$attrs', '$element', '$scope', '$interval', function(attributes, $element, $scope, $interval) {
      var audio;
      audio = this;
      audio.tracks = [];
      audio.currentTrack = null;
      audio.track;
      audio.currentTrackDuration;
      audio.currentTimeTrackDuration;
      audio.currentTrackArtist;
      audio.currentTrackTitle;
      audio.currentTrackCover;
      audio.progessBarWidth = 0;
      audio.paused = true;
      audio.addTrack = function(trackScope) {
        if (audio.tracks.indexOf(trackScope) < 0) {
          return audio.tracks.push(trackScope);
        }
      };
      audio.setTrack = function(t) {
        if (audio.track) {
          audio.track.src = 'data:audio/mpeg,0';
          audio.track.removeEventListener('timeupdate', audio.getCurrentTimeTrack);
        }
        audio.track = new Audio(audio.tracks[t].url);
        audio.currentTrackDuration = audio.tracks[t].duration;
        audio.currentTrackArtist = audio.tracks[t].artist;
        audio.currentTrackTitle = audio.tracks[t].title;
        audio.currentTrackCover = audio.tracks[t].cover;
        audio.startInterval();
        return audio.setCurrentTrack(t);
      };
      audio.setCurrentTrack = function(ct) {
        return audio.currentTrack = ct;
      };
      audio.getCurrentTrack = function() {
        return audio.currentTrack;
      };
      audio.addFromPlaylist = function(e) {
        var idx;
        e.preventDefault();
        idx = angular.element(e.target).data('index');
        audio.setTrack(idx);
        return audio.play();
      };
      audio.play = function() {
        if (audio.getCurrentTrack() === null) {
          audio.setTrack(0);
          audio.track.play();
          return audio.paused = false;
        } else {
          if (audio.track.paused) {
            audio.track.play();
            return audio.paused = false;
          } else {
            audio.track.pause();
            return audio.paused = true;
          }
        }
      };
      audio.convertToHumanMinutes = function(d) {
        var dur, mm, ss;
        mm = Math.floor(d / 60);
        ss = Math.round(d % 60);
        if (ss < 10) {
          ss = '0' + ss;
        }
        return dur = mm + ':' + ss;
      };
      audio.startInterval = function() {
        return audio.track.addEventListener('timeupdate', audio.getCurrentTimeTrack, false);
      };
      audio.getCurrentTimeTrack = function() {
        audio.currentTimeTrackDuration = this.currentTime;
        audio.setProgressBarPosition();
        return $scope.$digest();
      };
      audio.setProgressBarPosition = function() {
        return audio.progessBarWidth = (audio.currentTimeTrackDuration / audio.currentTrackDuration) * 100 + '%';
      };
      audio.getProgressBarPosition = function(e) {
        return console.log(Math.round(e.layerX / this.offsetWidth * 100));
      };
    }
  ]);
  cWavesurfer.directive('player', function() {
    return {
      restrict: 'E',
      templateUrl: myLocalized.partials + 'custom-player.html',
      controller: 'musicAudioPlayerController',
      controllerAs: 'audio'
    };
  });
  cWavesurfer.directive('customAudioSource', [
    'mdWavesurferUtils', function(mdWavesurferUtils) {
      return {
        restrict: 'E',
        require: '^player',
        scope: {
          url: '@',
          title: '@',
          artist: '@',
          cover: '@'
        },
        link: function(scope, element, attrs, audio) {
          var thepromise;
          audio.addTrack(scope);
          thepromise = mdWavesurferUtils.getLength(scope.url);
          return thepromise.then((function(duration) {
            scope.duration = duration;
          }), function(reason) {});
        }
      };
    }
  ]);
  cWavesurfer.directive('playerProgressBar', [
    function() {
      return {
        restrict: 'E',
        templateUrl: myLocalized.partials + 'player-progress-bar.html',
        require: '^player',
        link: function(scope, element, attrs, audio) {
          var barOuter;
          audio.progressBar = element;
          barOuter = element.find('#progressBar')[0];
          barOuter.addEventListener('click', audio.getProgressBarPosition, false);
        }
      };
    }
  ]);
})();
